/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define COMBO_TIMEOUT 60
#define BT0 BT_SEL 0
#define BT1 BT_SEL 1
#define BT2 BT_SEL 2
#define BT3 BT_SEL 3
#define BT4 BT_SEL 4

// &out OUT_BLE
// #define MO_TOG(layer) &mo_tog layer layer   // Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer
// &led_strip {
//    chain-length = <18>;
// };

&mt {
    tapping-term-ms = <500>;

    // retro-tap;
};

&lt { tapping-term-ms = <180>; };

&sk {
    release-after-ms = <3000>;
    quick-release;
};

&caps_word { continue-list = <UNDERSCORE MINUS SPACE BACKSPACE>; };

/ {
    combos {
        compatible = "zmk,combos";

        combo_dash {
            timeout-ms = <200>;
            key-positions = <5 15>;
            layers = <0 2>;
            bindings = <&kp MINUS>;
        };

        bt_clr {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <20 21 22 27 28 29>;
            layers = <3>;
        };

        combo_del {
            bindings = <&kp DELETE>;
            key-positions = <20 21>;
            timeout-ms = <200>;
            layers = <0>;
        };

        combo_dqt {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <5 6>;
            layers = <0>;
            timeout-ms = <200>;
        };

        cmb_bspLine {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <10 11>;
            layers = <0>;
        };

        combo-esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        combo-tab {
            bindings = <&kp TAB>;
            key-positions = <8 9>;
        };

        combo-capslock {
            bindings = <&caps_word>;
            key-positions = <24 25>;
        };

        combo-question {
            bindings = <&kp QUESTION>;
            key-positions = <23 24>;
        };

        combo-exclamation {
            bindings = <&kp EXCL>;
            key-positions = <25 26>;
        };

        keyrepeat {
            bindings = <&kp AT>;
            key-positions = <16 6>;
        };

        combo-chinese {
            bindings = <&kp LC(GRAVE)>;
            key-positions = <4 5>;
        };

        hold_shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <32 13>;
        };
    };

    behaviors {
        hold_shift: hold_shift {
            compatible = "zmk,behavior-smart-toggle";
            #binding-cells = <0>;
            bindings = <&kp RSHIFT>, <&none>;

            ignored-key-positions = <16 17 18 26 27 28>;
        };

        smart_moveline: smart_moveline {
            compatible = "zmk,behavior-smart-toggle";
            #binding-cells = <0>;
            bindings = <&kp RG(RALT)>, <&none>;

            ignored-key-positions = <7 17 27>;
        };

        td_esc: tap_dance_esc {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_ESC";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LALT>, <&kp ESC>;
        };

        macro_slideover: macro_slideover {
            label = "ZM_macro_slideover";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp BSLH>,
                <&macro_release>,
                <&kp CAPS>;
        };

        macro_windows: macro_windows {
            label = "ZM_macro_windows";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp DOWN>,
                <&macro_release>,
                <&kp CAPS>;
        };

        macro_switch: macro_switch {
            label = "ZM_macro_switch";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp GRAVE>,
                <&macro_release>,
                <&kp CAPS>;
        };

        FN_up: FN_up {
            compatible = "zmk,behavior-macro";
            label = "FN_UP";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp UP_ARROW>,
                <&macro_release>,
                <&kp CAPS>;
        };

        FN_down: FN_down {
            compatible = "zmk,behavior-macro";
            label = "FN_DOWN";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp DOWN>,
                <&macro_release>,
                <&kp CAPS>;
        };

        FN_left: FN_left {
            compatible = "zmk,behavior-macro";
            label = "FN_LEFT";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp LEFT>,
                <&macro_release>,
                <&kp CAPS>;
        };

        FN_right: FN_right {
            compatible = "zmk,behavior-macro";
            label = "FN_RIGHT";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_release>,
                <&kp CAPS>;
        };

        next_slideover: next_slideover {
            compatible = "zmk,behavior-macro";
            label = "NEXT_SLIDEOVER";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS &kp LCMD>,
                <&macro_tap>,
                <&kp BSLH>,
                <&macro_release>,
                <&kp CAPS &kp LCMD>;
        };

        macro_displaylocn: macro_displaylocn {
            compatible = "zmk,behavior-macro";
            label = "MACRO_DISPLAYLOCN";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS &kp LC(BACKSLASH)>,
                <&macro_release>;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <400>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ht_hl: holdtap_homerowlayer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTAP_HOMELAY";
            #binding-cells = <2>;
            tapping-term-ms = <225>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <125>;
            bindings = <&mo>, <&kp>;

            quick-tap-ms = <125>;
        };

        ht_shift: ht_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <130>;
            flavor = "tap-preferred";
        };

        bsp_word: bsp_word {
            compatible = "zmk,behavior-mod-morph";
            label = "BSP_WORD";
            bindings = <&kp LA(BACKSPACE)>, <&kp LA(DELETE)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        td_semic: td_semic {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SEMIC";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;

            tapping-term-ms = <250>;
        };

        td_shiftCW: td_shiftCW {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SHIFTCW";
            #binding-cells = <0>;
            bindings = <&sk RIGHT_SHIFT>, <&caps_word>;

            tapping-term-ms = <300>;
        };

        left_arrow: left_arrow {
            compatible = "zmk,behavior-tap-dance";
            label = "LEFT_ARROW";
            #binding-cells = <0>;
            bindings = <&kp LEFT>, <&kp LG(LEFT_ARROW)>;

            tapping-term-ms = <225>;
        };

        right_arr: right_arr {
            compatible = "zmk,behavior-tap-dance";
            label = "RIGHT_ARR";
            #binding-cells = <0>;
            bindings = <&kp RIGHT>, <&kp LG(RIGHT)>;

            tapping-term-ms = <225>;
        };

        left_taphold: left_taphold {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_TAPHOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
        };

        rght_taphold: rght_taphold {
            compatible = "zmk,behavior-hold-tap";
            label = "RGHT_TAPHOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
        };

        ht_hyper: ht_hyper {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_HYPER";
            #binding-cells = <2>;
            tapping-term-ms = <225>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <125>;
            quick-tap-ms = <125>;
            bindings = <&sk>, <&kp>;
        };

        mod_slash: mod_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_SLASH";
            bindings = <&kp KP_SLASH>, <&kp BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        pht_L2shift: pht_L2shift {
            compatible = "zmk,behavior-hold-tap";
            label = "PHT_L2SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <120>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <30 31 32 5 15 25 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29>;
        };

        ArrowSelect: ArrowSelect {
            compatible = "zmk,behavior-hold-tap";
            label = "ARROWSELECT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "tap-preferred";
        };

        mod_qmarkcolon: mod_qmarkcolon {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_QMARKCOLON";
            bindings = <&kp QUESTION>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ht_capsword: ht_capsword {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_CAPSWORD";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        swapper: swapper {
            compatible = "zmk,behavior-smart-toggle";
            #binding-cells = <0>;
            bindings = <&kp RGUI>, <&kp TAB>;

            ignored-key-positions = <20 29 31>;
            label = "SWAPPER";
        };

        ht_swapper: ht_swapper {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_SWAPPER";
            bindings = <&mo>, <&swapper>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        Default {
            display-name = "0DFL";
            bindings = <
&kp Q        &kp W           &kp E           &kp R             &kp T      &kp Y          &kp U                          &kp I            &kp O            &kp P
&hm LCTRL A  &hm LEFT_ALT S  &hm LEFT_GUI D  &hm LEFT_SHIFT F  &kp G      &kp H          &hm RIGHT_SHIFT J              &hm RIGHT_GUI K  &hm RIGHT_ALT L  &hm RCTRL SEMI
&kp Z        &kp X           &kp C           &kp V             &kp B      &kp N          &kp M                          &kp COMMA        &kp DOT          &kp FSLH
                             &sk LEFT_SHIFT  &mo 6             &kp SPACE  &kp BACKSPACE  &rght_taphold LS(ENTER) ENTER  &to 1
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
            label = "0DFL";
        };

        Gaming-Layer {
            display-name = "1SYN";
            bindings = <
&kp ESCAPE  &kp Q  &kp W  &kp E   &kp R   &none   &none     &kp UP_ARROW  &none      &kp TAB
&kp LCTRL   &kp A  &kp S  &kp D   &kp F   &none   &kp LEFT  &kp DOWN      &kp RIGHT  &none
&kp LSHIFT  &none  &none  &none   &kp P   &none   &none     &none         &none      &to 3
                   &to 0  &trans  &trans  &trans  &trans    &to 2
            >;

            sensor-bindings = <&inc_dec_kp LG(LS(Z)) LG(Z)>;
            label = "1 SYN";
        };

        Symbol-Layer {
            display-name = "2NAV";
            bindings = <
&kp AMPS   &kp FSLH              &kp GRAVE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp COLON         &kp SEMI           &kp QUESTION
&kp HASH   &kp NON_US_BACKSLASH  &kp TILDE  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp DOLLAR      &kp RIGHT_SHIFT  &kp RGUI          &kp RALT           &kp RCTRL
&kp ASTRK  &kp PERCENT           &kp CARET  &kp LT                &kp GREATER_THAN       &kp MINUS       &kp UNDER        &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &kp EXCL
                                 &to 0      &trans                &trans                 &trans          &trans           &to 1
            >;

            sensor-bindings = <&inc_dec_kp UP DOWN>;
            label = "2 NAV";
        };

        Bluetooth-Layer {
            display-name = "3BT";
            bindings = <
&bt BT0        &bt BT1        &bt BT2        &bt BT3        &bt BT4        &kp F1   &kp F2   &kp F3  &kp F4  &kp F5
&bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4  &kp F6   &kp F7   &kp F8  &kp F9  &kp F10
&out OUT_TOG   &none          &bt BT_PRV     &bt BT_NXT     &bt BT_CLR     &kp F11  &kp F12  &none   &none   &to 4
                              &to 0          &trans         &trans         &trans   &trans   &none
            >;

            sensor-bindings = <&inc_dec_kp C_BRI_UP C_BRI_DN>;
            label = "3 BT";
        };

        Chinese-Layer {
            display-name = "4MED";
            bindings = <
&kp Q  &kp W  &kp E  &kp R  &kp T      &kp Y     &kp U      &kp I                           &kp O    &kp P
&kp A  &kp S  &kp D  &kp F  &kp G      &kp H     &kp J      &kp K                           &kp L    &kp SEMI
&kp Z  &kp X  &kp C  &kp V  &kp B      &kp N     &kp M      &kp COMMA                       &kp DOT  &kp FSLH
              &to 0  &mo 6  &kp SPACE  &kp BSPC  &kp ENTER  &hm LEFT_BRACKET RIGHT_BRACKET
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
            label = "4 Md";
        };

        Number-Layer {
            display-name = "5OS";
            bindings = <
&kp EXCL  &kp AT  &kp HASH      &kp DOLLAR  &kp PLUS   &kp MINUS      &kp PERCENT  &kp CARET     &kp AMPERSAND  &kp ASTRK
&kp N1    &kp N2  &kp N3        &kp N4      &trans     &trans         &kp N5       &kp N6        &kp N7         &kp N8
&none     &none   &kp NUMBER_9  &none       &none      &none          &none        &kp NUMBER_0  &kp DOT        &none
                  &none         &none       &kp SPACE  &kp BACKSPACE  &none        &none
            >;

            sensor-bindings = <&inc_dec_kp TAB LS(TAB)>;
            label = "5 OS";
        };

        Mouse-Control {
            display-name = "6TOG";
            bindings = <
&kp ESC                        &kp C_VOL_DN    &kp F12        &kp C_VOLUME_UP  &kp K_MUTE      &msc SCRL_DOWN  &mkp MB1        &kp F1          &mkp MB2            &mkp MB3
&kp LEFT                       &kp DOWN_ARROW  &kp UP_ARROW   &kp RIGHT        &sk LEFT_SHIFT  &kp RC(F3)      &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP        &mmv MOVE_RIGHT
&left_taphold RG(GRAVE) GRAVE  &kp RC(RG(Q))   &kp LS(LG(S))  &none            &kp RG(RIGHT)   &msc SCRL_UP    &kp LC(RIGHT)   &kp RS(RIGHT)   &kp RS(LEFT_ARROW)  &kp LC(LEFT)
                                               &trans         &trans           &trans          &trans          &trans          &trans
            >;

            label = "6 TG";
        };
    };
};
